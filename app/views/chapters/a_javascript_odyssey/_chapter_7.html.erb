
<p>Our hero can run and jump, but the game needs more excitement and danger. Let's make it more interesting by adding obstacles that move!</p>

<%= book_illustration book, "hero_jumping.png", "Hero jumping over obstacle" %>

<p>Since obstacles are different from basic objects, we'll give them their own <span class="code">obstacle.js</span> file. We could make them stationary, but it's more thrilling to jump over moving obstacles.</p>

<p data-reader-target="beginner developer">We'll use the camera speed to decide how fast the obstacles should move.</p>

<%= source_code "javascript", "obstacle.js" do %>
export default class Obstacle {
    constructor ({x, y, width, height, sprite}) {
        this.x      = x
        this.y      = y
        this.width  = width
        this.height = height
        this.sprite = sprite
        this.speed  = 0.5
    }

    update (deltaTime, cameraSpeed) {
        this.x -= cameraSpeed * this.speed * deltaTime
    }

}
<% end %>

<p data-reader-target="beginner developer">Don't forget to update the obstacles in the scene's <span class="code">update</span> loop.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
update (deltaTime) {
    // ... omitted for brevity

    this.world.obstacles.forEach(obstacle => {
        obstacle.update(deltaTime, this.camera)
    })
}
<% end %>
</div>

<p>We won't generate obstacles the same way we did for other objects in the world. Instead, we'll make it more exciting by generating obstacles one at a time, at random intervals based on the camera's speed.</p>

<p data-reader-target="beginner developer">But first, we need to add information about the time that has passed in the scene.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
constructor (canvas) {
    // ... omitted for brevity

    this.elapsedTime = 0
}

update (deltaTime) {
    // ... omitted for brevity

    this.elapsedTime += deltaTime
}
<% end %>
</div>

<p>We'll make a new function for creating obstacles directly in the scene.</p>

<p data-reader-target="beginner developer">First, we'll check how much time has passed since the last obstacle was made. If it's too soon to create a new obstacle, we'll wait until the next loop.</p>

<p>Next, we'll make a new obstacle with a random position on the y-axis, size, and image.</p>

<p>Finally, we'll set the time for the next obstacle based on the camera's speed.</p>


<aside data-reader-target="curious">
  <p>Another piece of code that's a little complicated, I left it for the most daring <strong>curious</strong> ones.</p>
</aside>


<%= source_code "javascript", "scene.js" do %>
generateObstacles () {
    const {camera} = this

    if (this.elapsedTime < this.nextObstacleAt) {
        return
    }

    const scale = floatBetween([0.4, 0.8])

    const obstacle = new Obstacle({
        x:      camera.x + camera.width + 1,
        y:      floatBetween([2.5, 2.9]),
        width:  scale,
        height: scale,
        sprite: randomPick([
            'tech1',
            'tech2',
            'tech3',
            'tech4',
            'tech5',
            'tech6',
            'tech7'
        ])
    })

    this.add('obstacles', obstacle)

    const nextObstacleDelay = (1 / this.camera.speed) * floatBetween(2.5, 4.5)
    this.nextObstacleAt = this.elapsedTime + nextObstacleDelay
}
<% end %>

<p data-reader-target="beginner developer">Don't forget to start obstacle generation at the end of the <span class="code">generateWorld</span> function.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
generateWorld () {
    // ... omitted for brevity

    this.generateObstacles()
}
<% end %>
</div>


<h2>Collisions</h2>

<p>The obstacles don't do anything when they hit the hero. To fix this, we need to do some math.</p>

<p>Fortunately, we can simplify the hero and obstacles by using circles. Calculating collisions between two circles is easy.</p>

<p data-reader-target="beginner developer">But before we calculate collisions, we'll start by showing circles. This will make it easier to visualize the collisions.</p>

<p data-reader-target="beginner">Drawing a circle is a bit complicated because we need to draw an arc. I'll simplify this for you, but you can learn more by reading the <%= link_with_icon "arc", "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc", "mdn" %> documentation.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "utils.js" do %>
export function drawCircle (ctx, {x, y, radius, color}) {
    ctx.fillStyle = color
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * Math.PI)
    ctx.fill()
}
<% end %>
</div>

<p>But we have a problem: the hero and obstacles are squares for now. To calculate collisions, we need to find the center of the circle and its radius relative to the square.</p>

<p data-reader-target="beginner developer">We have to find the center of the circle by taking the position of the top-left corner of the square and adding half the size of the square.</p>

<p>The radius of the circle is half the size of the square.</p>

<p data-reader-target="beginner developer">We'll make a new dynamic property to calculate the circle of our hitbox.</p>

<%= book_illustration book, "obstacle_radius.png", "Obstacle radius" %>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "obstacle.js" do %>
get hitBox () {
    const semiWidth  = this.width  / 2
    const semiHeight = this.height / 2

    return {
        x:      this.x + semiWidth,
        y:      this.y + semiHeight,
        radius: semiWidth
    }
}
<% end %>
</div>

<p data-reader-target="beginner developer">Now let's create a new method called drawHitBox that will draw the collision circle of an element if a hitbox exists on that element.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "utils.js" do %>
export function drawHitBox (ctx, scene, element) {
    const {hitBox} = element

    if (hitBox) {
        drawCircle(ctx, {
            x:      hitBox.x - scene.camera.x,
            y:      hitBox.y - scene.camera.y,
            radius: hitBox.radius,
            color:  'black'
        })
    }
}
<% end %>
</div>

<p>We can draw the circle hitboxes in the scene for debugging purpose.</p>

<p data-reader-target="beginner developer">Unfortunately, our drawScene function is starting to get a bit cluttered. This is an opportunity to do some refactoring to incorporate the display of the hitboxes more cleanly.</p>

<p data-reader-target="beginner developer">In drawScene, we want to do 2 things: draw the world and draw the hero.</p>

<p data-reader-target="beginner developer">But the <span class="code">drawScene</span> function is getting too cluttered. This is a chance to refactor and make the display of hitboxes smoother.</p>

<p data-reader-target="beginner developer">We want to do two things in the <span class="code">drawScene</span> function: show the world then show the hero.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
export function drawScene (ctx, scene, images) {
    drawWorld(ctx, scene, images)
    drawHero(ctx, scene, images)
}
<% end %>
</div>

<p data-reader-target="beginner developer">Now it's much cleaner. In the <span class="code">drawWorld</span> function, we want to go through each element of the world and show it.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
function drawWorld (ctx, scene, images) {
    for (let category in scene.world) {
        scene.world[category].forEach(element => {
            drawSceneElement(ctx, scene, images, element)
        })
    }
}
<% end %>
</div>

<p data-reader-target="beginner developer">To simplify even more, we'll make a function called <span class="code">drawSceneElement</span> that will show an element of the scene. We'll show the hitbox here.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
function drawSceneElement (ctx, scene, images, element) {
    const drawParams = Object.assign({}, element)

    drawParams.image = images[drawParams.sprite]
    drawParams.x -= scene.camera.x
    drawParams.y -= scene.camera.y

    drawImage(ctx, drawParams)
    drawHitBox(ctx, scene, element)
}
<% end %>
</div>

<p data-reader-target="beginner developer">Now you can see the obstacles hitboxes if you refresh. This step was a bit long, but it's important to refactor. Otherwise, the code will be hard to read.</p>

<p data-reader-target="beginner developer">Next, let's look at the hero's hitbox, which is a bit more complicated to calculate.</p>

<p data-reader-target="beginner developer">The hero's body doesn't take up the entire square that surrounds it. Also, it's slightly off-center because of the legs. We need to consider these factors when we find the center of the circle and its radius.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "hero.js" do %>
get hitBox () {
    const semiWidth  = this.width  / 2
    const semiHeight = this.height / 2

    return {
        x:      this.x + semiWidth,
        y:      this.y + semiHeight * 0.75,
        radius: semiWidth * 0.5
    }
}
<% end %>
</div>

<p data-reader-target="beginner developer">Now let's show this hitbox when we display the hero to make sure we calculated the right values.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "utils.js" do %>
function drawHero (ctx, scene, images) {
    // ... omitted for brevity

    drawImage(ctx, drawParams)
    drawHitBox(ctx, scene, hero)
}
<% end %>
</div>

<p data-reader-target="beginner developer">If you refresh the page, you should see a black hitbox around the hero. It's not perfect, but it's enough for our mini-game.</p>

<%= book_illustration book, "display_hitboxes.png", "Display hitboxes" %>



<h2>Collision detection</h2>

<p>To find out if 2 circles touch each other, we will use the Pythagorean theorem.</p>

<div class="beginners_note" data-reader-target="curious beginner">
  <p>I recommend you to take a look at this <%= link_with_icon "Pythagorean theorem", "https://silentteacher.toxicode.fr/?theme=2D_distance", "silent_teacher" %> progression by Silent Teacher. It's a very fun way to understand how it works.</p>
</div>



<%= source_code "javascript", "utils.js" do %>
export function circleVsCircle (circleA, circleB) {
    const distanceX = circleA.x - circleB.x
    const distanceY = circleA.y - circleB.y
    const distance  = Math.sqrt(distanceX * distanceX + distanceY * distanceY)

    return distance < circleA.radius + circleB.radius
}
<% end %>

<p>Now in the scene, we'll check if the hero collides with an obstacle on every frame.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
checkCollisions () {
    const {world, hero} = this

    const collided = world.obstacles.some(obstacle => {
        obstacle.collided = circleVsCircle(hero.hitBox, obstacle.hitBox)

        return obstacle.collided
    })

    hero.collided = collided
}
<% end %>
</div>

<p data-reader-target="beginner">Remember to call this function first in the <span class="code">update</span> function.</p>

<div data-reader-target="beginner">
<%= source_code "javascript", "scene.js" do %>
update (deltaTime) {
    this.checkCollisions()

    // ... omitted for brevity
}
<% end %>
</div>

<p data-reader-target="beginner developer">Collisions should be working now, but we can't see them yet. We'll update the <span class="code">drawHitBox</span> function to show red when an element is colliding.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "utils.js" do %>
export function drawHitBox (ctx, scene, element) {
    const {hitBox} = element

    if (hitBox) {
        const color = element.collided ? 'red' : 'black'

        drawCircle(ctx, {
            x:      hitBox.x - scene.camera.x,
            y:      hitBox.y - scene.camera.y,
            radius: hitBox.radius,
            color
        })
    }
}
<% end %>
</div>

<p>We're done! Collisions are working. You'll see the obstacles turn red when they collide with the hero.</p>

<iframe src="/fallen_hero/index.html?speed=false&score=false&ground=false&noDebug=false&gameOver=false" frameborder="0"></iframe>

<h2>What's new ?</h2>

<ul>
  <li>Obstacle generation based on time</li>
  <li>Calculating collisions between 2 circles</li>
  <li>Showing a hitbox based on its state</li>
</ul>

<p>We have everything we need to make a game now.</p>

<%= render "chapter_sources",
  download_url: "https://github.com/Perky-Crow/fallen_hero/releases/tag/c7",
  explore_url: "https://github.com/Perky-Crow/fallen_hero/tree/c7"
%>