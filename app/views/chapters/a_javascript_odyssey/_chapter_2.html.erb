<p>There are various ways to draw on a web page. The first one that comes to mind is using <%= link_with_icon "HTML", "https://developer.mozilla.org/en-US/docs/Web/HTML", "mdn" %> and <%= link_with_icon "CSS", "https://developer.mozilla.org/en-US/docs/Web/CSS", "mdn" %>. However, there are also more powerful tools such as <%= link_with_icon "SVG", "https://developer.mozilla.org/en-US/docs/Web/SVG", "mdn" %> and <%= link_with_icon "Canvas", "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API", "mdn" %>.</p>

<p>When it comes to creating our mini-game, using Canvas is likely the most suitable method. Therefore, it is the approach we will adopt.</p>

<%= book_illustration book, "paint_canvas.png", "Painting on a canvas" %>



<h2 data-reader-target="beginner developer">Canvas API</h2>

<p data-reader-target="beginner developer">As we are not using any framework or library, we will need to use the Canvas API provided by web browsers.<span data-reader-target="beginner"> However, don't worry, all the functionalities we need are supported by modern browsers these days.</span></p>

<div class="beginners_note" data-reader-target="beginner">
  <p>If you are completely new to coding, you might be wondering where to start.</p>

  <p>Introducing <%= link_with_icon "Silent Teacher", "https://silentteacher.toxicode.fr/", "silent_teacher" %> and <%= link_with_icon "Compute It", "https://compute-it.toxicode.fr/", "compute_it" %> – two games designed to help you get started with the fundamentals of coding.</p>

  <p>In <%= link_with_icon "Silent Teacher", "https://silentteacher.toxicode.fr/", "silent_teacher" %>, you will learn by observation and deduction, while <%= link_with_icon "Compute It", "https://compute-it.toxicode.fr/", "compute_it" %> challenges you to run scripts as if you were a computer.</p>

  <p>Give these games a try, you will be surprised at how quickly you can pick up the basics.</p>

  <p>And if you ever get stuck on a challenge, remember that a computer is a logical, straightforward creature – it will always do exactly what you tell it to, no more and no less.</p>

  <p>So take your time, think things through, and you will get there.</p>
</div>

<p data-reader-target="beginner">If you open the <%= link_with_icon "source code", "https://github.com/Perky-Crow/fallen_hero/tree/c1", "github" %> (provided at the end of the previous chapter), you will notice that we already have a <span class="code">&lt;canvas&gt;</span> element in the <span class="code">index.html</span> file.</p>

<p data-reader-target="beginner developer">Our next step is to initialize it using JavaScript. I have created 2 JavaScript files: <span class="code">toy.js</span> and <span class="code">game.js</span>. <span class="code">toy.js</span> will be used to practice and test the tools we will create without cluttering <span class="code">game.js</span>, which will be exclusively dedicated to creating our game.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "toy.js" do %>
async function init () {
    const canvas = document.querySelector('#fallen_hero .game_canvas')
    const ctx = canvas.getContext('2d')
}

window.addEventListener('load', init)
<% end %>
</div>



<h2>Let's draw rectangles</h2>

<aside data-reader-target="curious">
  <p>I left some some bits of code for <strong>curious</strong> readers. It's optional to read, but short enough to understand the main points, even if you've never coded before.</p>
</aside>


<p>It must be admitted that the <%= link_with_icon "Canvas API", "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API", "mdn" %> can be somewhat complex, which is why there are frameworks available to simplify its usage. However, for the purpose of our game, we only require a few basic functions to display rectangles and images.</p>

<p>Let's create a first function that <%= link_with_icon "draws a rectangle", "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect", "mdn" %> using the Canvas API.</p>

<%= source_code "javascript", "toy.js" do %>
function drawRectangle (ctx, {x, y, width, height, color}) {
    ctx.fillStyle = color
    ctx.fillRect(x, y, width, height)
}
<% end %>

<p>Having created this function, we can now rely exclusively on it instead of using the Canvas API directly.</p>

<p>This marks the beginning of <strong>building our toolbox</strong> by creating such tools that will be useful in the future.</p>

<p>Now we can draw some rectangles on the canvas.</p>

<%= source_code "javascript", "toy.js" do %>
drawRectangle(ctx, {
    x: 50,
    y: 50,
    width: 100,
    height: 100,
    color: 'black'
})

drawRectangle(ctx, {
    x: 200,
    y: 50,
    width: 150,
    height: 150,
    color: 'white'
})
<% end %>

<p>You should see two rectangles appear.</p>

<%= book_illustration book, "draw_rectangles.png", "Drawing rectangles" %>



<h2>Now let's draw some images</h2>

<p>Drawing images can be a bit tricky, as we need to wait for the image to load before we can display it.</p>

<aside data-reader-target="beginner">
  <p>
    To achieve this, we will use an <%= link_with_icon "asynchronous", "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function", "mdn" %> function that will allow us to create a <%= link_with_icon "promise", "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise", "mdn" %>.
  </p>
</aside>

<p data-reader-target="beginner developer">So, let's start by creating a function to load an image. In addition, we will create a new file named <span class="code">utils.js</span> to store our utility functions.</p>

<%= source_code "javascript", "utils.js" do %>
export function loadImage (path) {
    return new Promise((resolve, reject) => {
        const image = new Image()
        image.src = path
        image.onload = () => resolve(image)
        image.onerror = reject
    })
}
<% end %>

<p data-reader-target="beginner">To use this function in <span class="code">toy.js</span>, we need to import it at the top of the file.</p>

<div data-reader-target="beginner">
<%= source_code "javascript", "toy.js" do %>
import {loadImage} from './utils.js'

const heroImage = await loadImage('images/hero_run_01.png')
<% end %>
</div>

<p>Now let's take a look at the Canvas API to <%= link_with_icon "draw an image", "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage", "mdn" %> and create our own function as we did for rectangles.</p>

<p data-reader-target="beginner developer"> By the way, this is the right time to move our <span class="code">drawRectangle</span> function to the separate file <span class="code">utils.js</span>.</p>

<%= source_code "javascript", "utils.js" do %>
export function drawImage (ctx, {x, y, width, height, image}) {
    ctx.drawImage(image, x, y, width, height)
}
<% end %>

<p>Then we can draw our hero on the canvas.</p>

<%= source_code "javascript", "toy.js" do %>
const heroImage = await loadImage('images/hero_run_01.png')
drawImage(ctx, {
    x: 50,
    y: 50,
    width: 100,
    height: 100,
    image: heroImage
})
<% end %>

<p>Here is the result.</p>

<%= book_illustration book, "paint_hero.png", "Drawing image" %>



<h2>Our progress so far</h2>

<p>We have unlocked the following tools:</p>

<ul>
  <li>Drawing a rectangle</li>
  <li>Loading an image</li>
  <li>Drawing an image</li>
</ul>

<p>This is all we need to draw the game scene.</p>


<%= render "chapter_sources",
  download_url: "https://github.com/Perky-Crow/fallen_hero/releases/tag/c2",
  explore_url: "https://github.com/Perky-Crow/fallen_hero/tree/c2"
%>