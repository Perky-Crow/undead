<%= book_illustration book, "to_game.png", "Character playing videogame" %>

<p data-reader-target="beginner developer">As the chapter title suggests, it's time to turn our toy into a game.</p>

<p data-reader-target="beginner developer">But before we switch to a new file, let's make one last change so we can continue testing in <span class="code">toy.js</span>. We'll add a <span class="code">debug</span> property to the scene and set it to true in <span class="code">toy.js</span>.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
constructor ({debug}) {
    // ... omitted for brevity
    this.debug = debug
}
<% end %>
</div>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "toy.js" do %>
const scene = new Scene({debug: true})
<% end %>
</div>

<p data-reader-target="beginner developer">Now we'll only show hitboxes if the "debug" mode is turned on.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "utils.js" do %>
export function drawHitBox (ctx, scene, element) {
    const {hitBox} = element

    if (scene.debug && hitBox) {
        // ... omitted for brevity
    }
}
<% end %>
</div>


<p data-reader-target="beginner developer">We're ready to switch to <span class="code">game.js</span> now! Copy the contents of <span class="code">toy.js</span> into <span class="code">game.js</span>.</p>

<p data-reader-target="beginner developer">You may have noticed that <span class="code">game.js</span> is pretty simple, and that's a good thing. It's best to keep your entry point as simple as possible. In our case, it's only used to set up how the game is launched and how the player interacts with it.</p>

<p data-reader-target="beginner">In <span class="code">index.html</span>, change the entry point to <span class="code">game.js</span>.</p>

<div data-reader-target="beginner">
<%= source_code "html", "index.html" do %>
<script src="scripts/game.js" type="module"></script>
<% end %>
</div>



<h2>Game Over</h2>

<p>Now we know when the player collides with an obstacle. Let's make the game stop when that happens.</p>

<p>First, we'll add a new piece of information to the scene: whether the game is over or not. If it is, we'll stop updating the scene. We'll also create a function to end the game.</p>

<%= source_code "javascript", "scene.js" do %>
constructor () {
    // ...

    this.ended = false
}

gameOver () {
    this.ended = true
}

update () {
    if (this.ended) {
        return
    }

    // ...
}
<% end %>

<p>Now we'll call the function to end the game when the player collides with an obstacle.</p>

<%= source_code "javascript", "scene.js" do %>
checkCollisions () {
    // ...

    if (collided) {
        this.gameOver()
    }
}
<% end %>



<h2>Difficulty</h2>

<p>Right now, the camera moves at the same speed throughout the game, which makes it too easy once you get the hang of it. We'll gradually increase the speed over time to make the game more challenging.</p>

<p>We'll also add a speed limit to prevent the camera from going too fast.</p>

<%= source_code "javascript", "scene.js" do %>
constructor () {
    // ...

    this.camera = {
        x:        0,
        y:        0,
        width:    7,
        height:   4,
        speed:    3,
        maxSpeed: 10
    }
}

update (deltaTime) {
    // ...

    const {camera} = this

    camera.x      += camera.speed * deltaTime
    camera.speed  += 0.05 * deltaTime
    camera.speed   = Math.min(camera.speed, camera.maxSpeed)
}
<% end %>

<p>The game should now gradually become more challenging.</p>



<h2>Score</h2>

<p>Adding a score is a good way to make the player want to play again and improve.</p>

<p>We'll calculate the score based on the time elapsed and the speed of the camera.</p>

<%= source_code "javascript", "scene.js" do %>
get score () {
    return Math.floor(this.elapsedTime * this.camera.speed)
}
<% end %>

<p>To display the score, we're going to use HTML since it's good at displaying text and placing it correctly. As long as the text isn't too stylized and is embedded in the game, it should work well.</p>

<p>In the <span class="code">index.html</span> file, let's add a div element to display the score.</p>

<%= source_code "html", "index.html" do %>
<div id="fallen_hero">
    <canvas class="game_canvas" width="700" height="400">
    </canvas>
    <div class="game_score">0</div>
</div>
<% end %>

<p data-reader-target="beginner developer">And position it using <strong>CSS</strong>.</p>

<div data-reader-target="beginner developer">
<%= source_code "css", "style.css" do %>
#fallen_hero .game_score {
    position: absolute;
    right: 1em;
    top: 0.5em;
    font: 3em monospace;
    font-weight: bold;
}
<% end %>
</div>

<p data-reader-target="beginner developer">We can now update the display of the score on each frame. Except when the game is over to avoid using resources unnecessarily.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "game.js" do %>
async function init () {
    const score = document.querySelector('#fallen_hero .game_score')
    // ...

    startAnimationLoop(function (deltaTime) {
        // ...

        if (!scene.ended) {
            score.innerHTML = scene.score
        }
    })
}
<% end %>
</div>



<h2>Replay screen</h2>

<p>When the game is over, it's not very practical to have to refresh the page to start over.</p>

<p>There are several ways to start a new game. One way is to create a <span class="code">reset</span> method on the scene that resets all the elements of the game. Another way is to create a new scene in the game.js file. In our case, creating a new scene is the easiest solution.</p>

<p>Let's create a game over screen in <strong>HTML</strong> and <strong>CSS</strong> with a button to start a new game.</p>

<%= book_illustration book, "game_over.png", "Game Over Screen" %>

<div data-reader-target="beginner developer">
<%= source_code "html", "index.html" do %>
<div id="fallen_hero">
    <canvas class="game_canvas" width="700" height="400"></canvas>
    <div class="game_score">0</div>
    <div class="game_over">
        <div class="game_over_visual">
            <img src="images/game_over.png" alt="Game Over">
        </div>
        <div class="game_over_replay">
            <img src="images/replay.png" class="game_replay_button" alt="Restart">
        </div>
    </div>
</div>
<% end %>
</div>

<div data-reader-target="beginner developer">
<%= source_code "css", "style.css" do %>
#fallen_hero .game_over {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

#fallen_hero .game_over .game_over_visual {
    display: flex;
    justify-content: center;
    margin-top: 3em;
}

#fallen_hero .game_over .game_over_visual img {
    width: 200px;
}

#fallen_hero .game_over .game_over_replay {
    display: flex;
    justify-content: center;
    margin-top: 2em;
}

#fallen_hero .game_over .game_over_replay img {
    width: 80px;
    border-radius: 50%;
    padding: 0.5em;
    cursor: pointer;
}

#fallen_hero .game_over .game_over_replay img:hover {
    border-bottom: 0.25em solid black;
}
<% end %>
</div>


<p data-reader-target="beginner developer">We now need to give our game.js file a way to know when the game is over.</p>

<p data-reader-target="beginner developer">To do this, we're going to use a <%= link_with_icon "callback function", "https://developer.mozilla.org/en-US/docs/Glossary/Callback_function", "mdn" %>.</p>

<p data-reader-target="beginner developer">When creating the scene, we'll pass a function hat will be called when the game is over.</p>

<p data-reader-target="beginner developer">This function will be responsible for displaying the game over screen and allowing the player to start a new game.</p>

<p data-reader-target="beginner developer">We'll refactor our game.js file so that we can easily create a new instance of the scene and pass in the callback function.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "game.js" do %>
async function init () {
    const score    = document.querySelector('#fallen_hero .game_score')
    const canvas   = document.querySelector('#fallen_hero .game_canvas')
    const gameOver = document.querySelector('#fallen_hero .game_over')
    const replay   = document.querySelector('#fallen_hero .game_replay_button')
    const ctx      = canvas.getContext('2d')

    setScale(ctx, 100)

    const images = await loadImages(imagePaths)

    let scene = createScene()

    function createScene () {
        gameOver.style.display = 'none'

        return new Scene({
            debug: false,
            onGameOver: displayGameOver
        })
    }

    function restartScene () {
        scene = createScene()
    }

    function displayGameOver () {
        gameOver.style.display = 'block'
    }

    replay.addEventListener('click', restartScene)

    // ...
}
<% end %>
</div>

<p data-reader-target="beginner developer">The createScene function creates a new scene and hides the game over screen.</p>

<p data-reader-target="beginner developer">In the creation of the scene, we connect a onGameOver callback that we will use later in Scene. This callback simply displays the game over screen.</p>

<p data-reader-target="beginner developer">Finally, on the game over screen, we call the restartScene method when the player clicks the button.</p>

<p data-reader-target="beginner developer">We just need to connect our callback in the scene and trigger it when the game ends.</p>

<div data-reader-target="beginner developer">
<%= source_code "javascript", "scene.js" do %>
constructor ({debug, onGameOver}) {
    // ...
    this.onGameOver = onGameOver
}

gameOver () {
    if (!this.ended) {
        this.ended = true
        this.onGameOver()
    }
}
<% end %>
</div>

<p>Well done!</p>

<p>Thanks to everyone who has read this far.</p>

<p>If you've been following along while trying to reproduce the game on your own, don't stop there. There are still lots of things to refine, add, and improve.</p>

<p>You can also freely use the code (tools are meant to be reused) and graphics assets for your own projects if you wish.</p>


<%= render "chapter_sources",
  download_url: "https://github.com/Perky-Crow/fallen_hero/releases/tag/c8",
  explore_url: "https://github.com/Perky-Crow/fallen_hero/tree/c8"
%>